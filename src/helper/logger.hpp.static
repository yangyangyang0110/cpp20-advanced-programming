/* Proj: cpp20-advanced-programming
 * File: logger.hpp
 * Created Date: 2022/10/20
 * Author: YangYangYang (yangyangyang0110@outlook.com)
 * Description:
 * -----
 * Last Modified: 2022/10/20 15:13:56
 * Modified By: YangYangYang (yangyangyang0110@outlook.com)
 * -----
 * Copyright (c) 2022  . All rights reserved.
 */
#ifndef CPP20_ADVANCED_PROGRAMMING_LOGGER_HPP
#define CPP20_ADVANCED_PROGRAMMING_LOGGER_HPP

/*
 * @Author: yangzilong
 * @Date: 2021-12-21 11:07:11
 * @Last Modified by: yangzilong
 * @Email: yangzilong@objecteye.com
 * @Description:
 */

#pragma once

#include <spdlog/common.h>
#include <spdlog/details/circular_q.h>
#include <spdlog/details/file_helper.h>
#include <spdlog/details/null_mutex.h>
#include <spdlog/details/os.h>
#include <spdlog/details/synchronous_factory.h>
#include <spdlog/fmt/fmt.h>
#include <spdlog/sinks/base_sink.h>
#include <spdlog/sinks/stdout_color_sinks.h>
#include <spdlog/spdlog.h>

#include <filesystem>
#include <optional>
#include <regex>

#include <chrono>
#include <cstdio>
#include <ctime>
#include <iostream>
#include <memory>
#include <mutex>
#include <set>
#include <string>
#include <vector>

#define FILENAME_ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)

#ifdef __MSVC_VER__
#define OS_SEP "\\"
#else
#define OS_SEP "/"
#endif

#define LOG_TRACE_WITH_LOGGER(logger, ...)                                               \
    {                                                                                    \
        SPDLOG_LOGGER_TRACE(logger, __VA_ARGS__);                                        \
    }
#define LOG_DEBUG_WITH_LOGGER(logger, ...)                                               \
    {                                                                                    \
        SPDLOG_LOGGER_DEBUG(logger, __VA_ARGS__);                                        \
    }
#define LOG_WARN_WITH_LOGGER(logger, ...)                                                \
    {                                                                                    \
        SPDLOG_LOGGER_WARN(logger, __VA_ARGS__);                                         \
    }
#define LOG_ERROR_WITH_LOGGER(logger, ...)                                               \
    {                                                                                    \
        SPDLOG_LOGGER_ERROR(logger, __VA_ARGS__);                                        \
    }
#define LOG_INFO_WITH_LOGGER(logger, ...)                                                \
    {                                                                                    \
        SPDLOG_LOGGER_INFO(logger, __VA_ARGS__);                                         \
    }
#define LOG_CRITICAL_WITH_LOGGER(logger, ...)                                            \
    {                                                                                    \
        SPDLOG_LOGGER_CRITICAL(logger, __VA_ARGS__);                                     \
    }

// use fmt lib, e.g. LOG_WARN("warn log, {1}, {1}, {2}", 1, 2);
#define LOG_TRACE(msg, ...)                                                              \
    spdlog::log({FILENAME_, __LINE__, __FUNCTION__}, spdlog::level::trace, msg,          \
                ##__VA_ARGS__)
#define LOG_DEBUG(msg, ...)                                                              \
    spdlog::log({FILENAME_, __LINE__, __FUNCTION__}, spdlog::level::debug, msg,          \
                ##__VA_ARGS__)
#define LOG_INFO(msg, ...)                                                               \
    spdlog::log({FILENAME_, __LINE__, __FUNCTION__}, spdlog::level::info, msg,           \
                ##__VA_ARGS__)
#define LOG_WARN(msg, ...)                                                               \
    spdlog::log({FILENAME_, __LINE__, __FUNCTION__}, spdlog::level::warn, msg,           \
                ##__VA_ARGS__)
#define LOG_ERROR(msg, ...)                                                              \
    spdlog::log({FILENAME_, __LINE__, __FUNCTION__}, spdlog::level::err, msg,            \
                ##__VA_ARGS__)
#define LOG_CRITICAL(msg, ...)                                                           \
    spdlog::log({FILENAME_, __LINE__, __FUNCTION__}, spdlog::level::critical, msg,       \
                ##__VA_ARGS__)

namespace helper::logger {

enum class LogLevel {
    OFF   = -1,
    DEBUG = 0,
    INFO  = 1,
    WARN  = 2,
    ERR   = 3,
    FATAL = 4,
    TRACE = 5,
};

namespace detail {

namespace fs = std::filesystem;

template <LogLevel level> struct ToSpdLog
    : public std::integral_constant<void *, nullptr> {
};

template <> struct ToSpdLog<LogLevel::TRACE>
    : public std::integral_constant<spdlog::level::level_enum, spdlog::level::trace> {
};

template <> struct ToSpdLog<LogLevel::DEBUG>
    : public std::integral_constant<spdlog::level::level_enum, spdlog::level::debug> {
};

template <> struct ToSpdLog<LogLevel::INFO>
    : public std::integral_constant<spdlog::level::level_enum, spdlog::level::info> {
};

template <> struct ToSpdLog<LogLevel::WARN>
    : public std::integral_constant<spdlog::level::level_enum, spdlog::level::warn> {
};

template <> struct ToSpdLog<LogLevel::ERR>
    : public std::integral_constant<spdlog::level::level_enum, spdlog::level::err> {
};

template <> struct ToSpdLog<LogLevel::FATAL>
    : public std::integral_constant<spdlog::level::level_enum, spdlog::level::critical> {
};

template <> struct ToSpdLog<LogLevel::OFF>
    : public std::integral_constant<spdlog::level::level_enum, spdlog::level::off> {
};

template <LogLevel level> struct ToSpdLogProxy : public ToSpdLog<level> {
};

std::vector<fs::directory_entry> list_dir(const fs::path &p, bool is_sort_result = true)
{
    if (!fs::is_directory(p)) return {};
    decltype(list_dir(p, is_sort_result)) abs_paths;
    try {
        for (const fs::directory_entry &dir_entry : fs::directory_iterator(p))
            abs_paths.push_back(dir_entry);
    } catch (const std::exception &e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    if (is_sort_result && !abs_paths.empty())
        std::sort(abs_paths.begin(), abs_paths.end());
    return abs_paths;
}

bool remove_directory(const fs::path &dir_path)
{
    std::cout << "dir_path: " << dir_path << std::endl;
    if (!fs::is_directory(dir_path)) return false;
    return fs::remove_all(dir_path) > 0;
}

std::optional<std::time_t> try_to_time_t(const std::string &datetime,
                                         const std::regex &reflect = std::regex{
                                             R"((\d{4})-(\d{2})-(\d{2}))"})
{
    std::smatch pieces_match;
    const auto match_result = std::regex_match(datetime, pieces_match, reflect);
    if (!match_result) return std::nullopt;

    const auto &&[year, month, day] =
        std::make_tuple(std::stoi(pieces_match[1]), std::stoi(pieces_match[2]),
                        std::stoi(pieces_match[3]));
    // std::cout << "  " << year << " " << month << " " << day << std::endl;

    struct std::tm tm {
    };
    tm.tm_year = year - 1900;
    tm.tm_mon  = month - 1;
    tm.tm_mday = day;

    std::time_t result;

    if ((result = mktime(&tm)) == (time_t)-1) {
        fprintf(stderr, "Could not convert time input to time_t\n");
        return std::nullopt;
    }
    return result;
}

void remove_invalid_log_dir(
    const std::string &base_log_dir_path,
    const std::chrono::time_point<std::chrono::system_clock> &invalid_time_point_boundary)
{
    fs::path base_log_dir{base_log_dir_path};

    const std::time_t time =
        std::chrono::system_clock::to_time_t(invalid_time_point_boundary);
    std::cout << std::put_time(std::localtime(&time), "%F %T") << std::endl;

    const auto dirs = detail::list_dir(base_log_dir);

    for (const auto &dir : dirs) {
        const auto opt = detail::try_to_time_t(dir.path().filename());
        if (opt) {
            if (invalid_time_point_boundary >
                std::chrono::system_clock::from_time_t(opt.value())) {
                std::cout << "remove-dirname: " << dir.path() << std::endl;
                // detail::remove_directory()
            }
        }
    }
}

} // namespace detail

} // namespace helper::logger

namespace spdlog {
namespace sinks {
template <typename Mutex> class easy_file_sink final : public base_sink<Mutex>
{
public:
    easy_file_sink(filename_t base_log_dir, size_t max_file_bytes,
                   size_t max_retention_days)
        : base_log_dir_(std::move(base_log_dir))
        , max_file_bytes_(max_file_bytes)
        , max_retention_days_(max_retention_days)
    {
        auto now      = log_clock::now();
        auto filename = gen_filename_by_daily(base_log_dir_, now_tm(now));

        // remove before logs.
        if (max_retention_days_ > 0) {
            using namespace std::chrono_literals;
            ::helper::logger::detail::remove_invalid_log_dir(
                base_log_dir_, now - max_retention_days * 24h);
        }

        file_helper_.open(filename, false);
        current_size_ = file_helper_.size();
        rotation_tp_  = next_rotation_tp_();

        if (max_retention_days_ > 0) {
            filespath_q_.push_back(std::move(std::set<filename_t>()));
            filespath_q_[filespath_q_.size() - 1].insert(filename);
        }
    }

    filename_t filename()
    {
        std::lock_guard<Mutex> lock(base_sink<Mutex>::mutex_);
        return file_helper_.filename();
    }

protected:
    void sink_it_(const details::log_msg &msg) override
    {
        memory_buf_t formatted;
        base_sink<Mutex>::formatter_->format(msg, formatted);
        current_size_ += formatted.size();

        auto time = msg.time;
        if (time >= rotation_tp_) {
            file_helper_.close();
            auto filename = gen_filename_by_daily(base_log_dir_, now_tm(time));
            file_helper_.open(filename, false);
            current_size_ = file_helper_.size();
            rotation_tp_  = next_rotation_tp_();

            {
                filespath_q_.push_back(std::move(std::set<filename_t>()));
                filespath_q_[filespath_q_.size() - 1].emplace(filename);
            }

            // Do the cleaning only at the end because it might throw on
            // failure.
            if (max_retention_days_ > 0 && filespath_q_.size() > max_retention_days_)
                delete_old_();
        } else if (current_size_ >= max_file_bytes_) {
            file_helper_.close();
            auto src_name = gen_filename_by_daily(base_log_dir_, now_tm(time));
            auto target_name =
                gen_filename_by_filesize(base_log_dir_, now_tm(time),
                                         filespath_q_[filespath_q_.size() - 1].size());

            // rename file if failed then us `target_name` as src_name.
            if (!rename_file_(src_name, target_name)) {
                details::os::sleep_for_millis(200);
                if (!rename_file_(src_name, target_name)) {
                    fprintf(stderr, "%s:%d rename %s to %s failed\n", FILENAME_, __LINE__,
                            src_name.c_str(), target_name.c_str());
                    src_name = target_name;
                }
            }

            filespath_q_[filespath_q_.size() - 1].emplace(src_name);
            if (src_name != target_name)
                filespath_q_[filespath_q_.size() - 1].emplace(target_name);

            file_helper_.open(src_name, false);
            current_size_ = file_helper_.size();
            rotation_tp_  = next_rotation_tp_();
        }

        file_helper_.write(formatted);
    }

    void flush_() override { file_helper_.flush(); }

private:
    tm now_tm(log_clock::time_point tp)
    {
        time_t t_now = log_clock::to_time_t(tp);
        return spdlog::details::os::localtime(t_now);
    }

    /**
     * @brief Get next day tm.
     *
     * @return log_clock::time_point
     */
    log_clock::time_point next_rotation_tp_()
    {
        auto now           = log_clock::now();
        tm date            = now_tm(now);
        date.tm_hour       = 0;
        date.tm_min        = 0;
        date.tm_sec        = 0;
        auto rotation_time = log_clock::from_time_t(std::mktime(&date));
        if (rotation_time > now) return rotation_time;
        return {rotation_time + std::chrono::hours(24)};
    }

    // Delete the file N rotations ago.
    // Throw spdlog_ex on failure to delete the old file.
    void delete_old_()
    {
        for (auto iter = filespath_q_.begin(); iter != filespath_q_.end();) {
            if (filespath_q_.size() <= max_retention_days_) break;

            for (const auto &it : *iter) {
                bool ok = details::os::remove_if_exists(it) == 0;
                if (!ok)
                    throw_spdlog_ex("Failed removing daily file " +
                                        details::os::filename_to_str(it),
                                    errno);
            }
            filespath_q_.erase(iter);
        }
    }

    /*  */
    static filename_t gen_filename_by_daily(const filename_t &base_log_dir,
                                            const tm &now_tm)
    {
        return fmt::format(SPDLOG_FILENAME_T("{}{}{:04d}-{:02d}-{:02d}{}{}"),
                           base_log_dir, OS_SEP, now_tm.tm_year + 1900, now_tm.tm_mon + 1,
                           now_tm.tm_mday, OS_SEP, "base.log");
    }

    //
    static filename_t gen_filename_by_filesize(const filename_t &base_log_dir,
                                               const tm &now_tm, const int32_t &idx)
    {
        return fmt::format(
            SPDLOG_FILENAME_T("{}{}{:04d}-{:02d}-{:02d}{}{}-{:02d}{:02d}{:02d}.{:d}{}"),
            base_log_dir, OS_SEP, now_tm.tm_year + 1900, now_tm.tm_mon + 1,
            now_tm.tm_mday, OS_SEP, "base", now_tm.tm_hour, now_tm.tm_min, now_tm.tm_sec,
            idx, ".log");
    }

    static bool rename_file_(const filename_t &src_filename,
                             const filename_t &target_filename)
    {
        (void)details::os::remove(target_filename);
        return details::os::rename(src_filename, target_filename) == 0;
    }

    filename_t base_log_dir_;
    log_clock::time_point rotation_tp_;
    details::file_helper file_helper_;
    std::size_t max_file_bytes_;
    std::size_t max_retention_days_;
    std::size_t current_size_;
    std::vector<std::set<filename_t>> filespath_q_;
};

using easy_file_sink_mt = easy_file_sink<std::mutex>;
using easy_file_sink_st = easy_file_sink<details::null_mutex>;

} // namespace sinks

template <typename Factory = spdlog::synchronous_factory>
inline std::shared_ptr<logger> easy_logger_mt(const std::string &logger_name,
                                              const filename_t &filename, size_t max_size,
                                              size_t max_keep_days = -1)
{
    return Factory::template create<sinks::easy_file_sink_mt>(logger_name, filename,
                                                              max_size, max_keep_days);
}

template <typename Factory = spdlog::synchronous_factory>
inline std::shared_ptr<logger> easy_logger_st(const std::string &logger_name,
                                              const filename_t &filename, size_t max_size,
                                              size_t max_keep_days = -1)
{
    return Factory::template create<sinks::easy_file_sink_st>(logger_name, filename,
                                                              max_size, max_keep_days);
}

} // namespace spdlog

namespace helper::logger {

template <LogLevel code,
          typename RetType =
              std::remove_cvref_t<typename detail::ToSpdLogProxy<code>::value_type>,
          std::enable_if_t<std::is_same_v<spdlog::level::level_enum, RetType>>>
static constexpr RetType to_spdlog_level() noexcept(false)
{
    return detail::ToSpdLog<code>::value;
}

class LoggerGenerator
{
public:
    static std::shared_ptr<spdlog::logger>
    gen_logger(const spdlog::level::level_enum &level, const std::string &logger_name,
               const std::string &file_path, size_t max_file_size, size_t max_keep_days)
    {
        std::vector<spdlog::sink_ptr> sinks;
        sinks.reserve(2);

        if (level >= spdlog::level::level_enum::warn) {
            sinks.push_back(std::make_shared<spdlog::sinks::stderr_color_sink_mt>());
        } else /*if (level >= spdlog::level::level_enum::info)*/ {
            sinks.push_back(std::make_shared<spdlog::sinks::stdout_color_sink_mt>());
        }

        sinks.push_back(std::make_shared<spdlog::sinks::easy_file_sink_mt>(
            file_path, max_file_size, max_keep_days));

        auto logger = std::make_shared<spdlog::logger>(logger_name, std::begin(sinks),
                                                       std::end(sinks));
        logger->set_level(level);
        logger->set_pattern("[%L %Y/%m/%d %T.%e (P)%P (T)%t] [%!] [%s:%#] %v");
        return logger;
    }

    static void set_default_logger(const LogLevel &level, const std::string &logger_name,
                                   const std::string &file_name, size_t max_file_size,
                                   size_t max_keep_days)
    {
        // spdlog::level::level_enum spd_level = helper::logger::to_spdlog_level<level>();

        spdlog::level::level_enum spd_level = detail::ToSpdLog<level>();

        // spdlog::level::level_enum spd_level =
        //     helper::logger::to_spdlog_level<LogLevel::INFO>();

        auto logger =
            gen_logger(spd_level, logger_name, file_name, max_file_size, max_keep_days);
        spdlog::set_default_logger(logger);

        spdlog::flush_on(spd_level);
        spdlog::flush_every(std::chrono::seconds(1));
    }
};

enum class FileSizeType : int32_t { B = 1, KB = B * 1024, MB = KB * 1024 };

template <FileSizeType fileSizeType = FileSizeType::MB>
static void setGlobalDefaultLogger(const LogLevel &level, const std::string &logger_name,
                                   const std::string &file_path, size_t max_file_size,
                                   size_t max_retention_days)
{
    static LoggerGenerator loggerGenerator;
    LoggerGenerator::set_default_logger(
        level, logger_name, file_path, max_file_size * static_cast<int32_t>(fileSizeType),
        max_retention_days);
}

} // namespace helper::logger

#endif // CPP20_ADVANCED_PROGRAMMING_LOGGER_HPP
